@page "/fetchdata"
@using AppTemplate.Shared
@using System.Net.Http.Headers 
@inject HttpClient Http
@inject TokenAuthenticationStateProvider TokenProvider

<AuthorizeView>
    <Authorized>
        <h1>Weather forecast</h1>

        <p>This component demonstrates fetching data from the server.</p>

        @if (forecasts == null)
        {
            <MdcLinearProgress />
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        Please login.
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState.Result.User.Identity.IsAuthenticated)
        {
            var token = await TokenProvider.GetTokenAsync();
            forecasts = await Http.GetAuthorizedJsonAsync<WeatherForecast[]>(
                "api/weatherforecast",
                new AuthenticationHeaderValue("Bearer", token));
        }
    }

}
